//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISSA.EDM
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DataSource : DbContext
    {
        public DataSource()
            : base("name=DataSource")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Application> Applications { get; set; }
        public DbSet<Membership> Memberships { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tbl_Admin_RolesMasterLevel> tbl_Admin_RolesMasterLevel { get; set; }
        public DbSet<tbl_Admin_RolesSubLevel> tbl_Admin_RolesSubLevel { get; set; }
        public DbSet<tbl_Admin_User_Role> tbl_Admin_User_Role { get; set; }
        public DbSet<tbl_Admin_Users> tbl_Admin_Users { get; set; }
        public DbSet<tbl_AuditLog> tbl_AuditLog { get; set; }
        public DbSet<tbl_Mgr_SpecialOperations> tbl_Mgr_SpecialOperations { get; set; }
        public DbSet<tbl_Mgr_WorkSchedule> tbl_Mgr_WorkSchedule { get; set; }
        public DbSet<tbl_Mgr_WorkSchedule_Days> tbl_Mgr_WorkSchedule_Days { get; set; }
        public DbSet<tbl_Mgr_WorkSchedule_Employees> tbl_Mgr_WorkSchedule_Employees { get; set; }
        public DbSet<tbl_Op_Complaints> tbl_Op_Complaints { get; set; }
        public DbSet<tbl_Op_DailyLogs> tbl_Op_DailyLogs { get; set; }
        public DbSet<tbl_Op_DailyLogsCallLog> tbl_Op_DailyLogsCallLog { get; set; }
        public DbSet<tbl_Op_IncidentPersonsAffected> tbl_Op_IncidentPersonsAffected { get; set; }
        public DbSet<tbl_Ref_AbsentType> tbl_Ref_AbsentType { get; set; }
        public DbSet<tbl_Ref_Areas> tbl_Ref_Areas { get; set; }
        public DbSet<tbl_Ref_ComplaintChannel> tbl_Ref_ComplaintChannel { get; set; }
        public DbSet<tbl_Ref_Departments> tbl_Ref_Departments { get; set; }
        public DbSet<tbl_Ref_IncidentPersonAffectedType> tbl_Ref_IncidentPersonAffectedType { get; set; }
        public DbSet<tbl_Ref_IncidentTypes> tbl_Ref_IncidentTypes { get; set; }
        public DbSet<tbl_Ref_Locations> tbl_Ref_Locations { get; set; }
        public DbSet<tbl_Ref_Positions> tbl_Ref_Positions { get; set; }
        public DbSet<tbl_Ref_Regions> tbl_Ref_Regions { get; set; }
        public DbSet<tbl_Ref_Shifts> tbl_Ref_Shifts { get; set; }
        public DbSet<tbl_Ref_SickLeaveFor> tbl_Ref_SickLeaveFor { get; set; }
        public DbSet<tbl_Ref_WorkScheduleCategories> tbl_Ref_WorkScheduleCategories { get; set; }
        public DbSet<tbl_Sup_Employees> tbl_Sup_Employees { get; set; }
        public DbSet<tbl_Sup_ShiftReport> tbl_Sup_ShiftReport { get; set; }
        public DbSet<tbl_Sup_ShiftReportChecks> tbl_Sup_ShiftReportChecks { get; set; }
        public DbSet<tbl_Sup_ShiftReportChecks_Officers> tbl_Sup_ShiftReportChecks_Officers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<tbl_Sup_DailyMasterRoster> tbl_Sup_DailyMasterRoster { get; set; }
        public DbSet<tbl_Sup_DailyPostAssignment> tbl_Sup_DailyPostAssignment { get; set; }
        public DbSet<temptable> temptables { get; set; }
        public DbSet<tbl_Op_DailyLogsPersonWorking> tbl_Op_DailyLogsPersonWorking { get; set; }
        public DbSet<tbl_Mgr_WeeklySecurityReport> tbl_Mgr_WeeklySecurityReport { get; set; }
        public DbSet<tbl_Mgr_WeeklySecurityReportComparison> tbl_Mgr_WeeklySecurityReportComparison { get; set; }
        public DbSet<tbl_Mgr_DateTimeGrant> tbl_Mgr_DateTimeGrant { get; set; }
        public DbSet<tbl_Reports> tbl_Reports { get; set; }
        public DbSet<tbl_ReportsRole> tbl_ReportsRole { get; set; }
        public DbSet<tbl_Op_Incidents> tbl_Op_Incidents { get; set; }
        public DbSet<tbl_Op_CallIn_Absent> tbl_Op_CallIn_Absent { get; set; }
    
        public virtual ObjectResult<sp_Acknowledgement_Sel4DDL_Result> sp_Acknowledgement_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Acknowledgement_Sel4DDL_Result>("sp_Acknowledgement_Sel4DDL");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_Area_Sel4DDL_Result> sp_Area_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Area_Sel4DDL_Result>("sp_Area_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_CallForwardedTo_Sel4DDL_Result> sp_CallForwardedTo_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CallForwardedTo_Sel4DDL_Result>("sp_CallForwardedTo_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_CallInOff_Search_Result> sp_CallInOff_Search(string reportNumber, Nullable<System.DateTime> date, Nullable<short> takenByID, Nullable<short> forwardedToID, Nullable<short> employeeID)
        {
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var takenByIDParameter = takenByID.HasValue ?
                new ObjectParameter("takenByID", takenByID) :
                new ObjectParameter("takenByID", typeof(short));
    
            var forwardedToIDParameter = forwardedToID.HasValue ?
                new ObjectParameter("forwardedToID", forwardedToID) :
                new ObjectParameter("forwardedToID", typeof(short));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CallInOff_Search_Result>("sp_CallInOff_Search", reportNumberParameter, dateParameter, takenByIDParameter, forwardedToIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<sp_CallTakenBy_Sel4DDL_Result> sp_CallTakenBy_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CallTakenBy_Sel4DDL_Result>("sp_CallTakenBy_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_ComplaintMode_Sel4DDL_Result> sp_ComplaintMode_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ComplaintMode_Sel4DDL_Result>("sp_ComplaintMode_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_Complaints_Search_Result> sp_Complaints_Search(string reportNumber, Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> channelID)
        {
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("channelID", channelID) :
                new ObjectParameter("channelID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Complaints_Search_Result>("sp_Complaints_Search", reportNumberParameter, dateParameter, areaIDParameter, locationIDParameter, channelIDParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_ActualPersonWorking_Select_Result> sp_DailyLog_ActualPersonWorking_Select(Nullable<int> dlID)
        {
            var dlIDParameter = dlID.HasValue ?
                new ObjectParameter("dlID", dlID) :
                new ObjectParameter("dlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_ActualPersonWorking_Select_Result>("sp_DailyLog_ActualPersonWorking_Select", dlIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Audit_Select_Result> sp_DailyLog_Audit_Select(Nullable<int> dailyLogID)
        {
            var dailyLogIDParameter = dailyLogID.HasValue ?
                new ObjectParameter("dailyLogID", dailyLogID) :
                new ObjectParameter("dailyLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Audit_Select_Result>("sp_DailyLog_Audit_Select", dailyLogIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_CallLog_Select_Result> sp_DailyLog_CallLog_Select(Nullable<int> dailyLogID)
        {
            var dailyLogIDParameter = dailyLogID.HasValue ?
                new ObjectParameter("dailyLogID", dailyLogID) :
                new ObjectParameter("dailyLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_CallLog_Select_Result>("sp_DailyLog_CallLog_Select", dailyLogIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Doubles_Select_Result> sp_DailyLog_Doubles_Select(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<System.TimeSpan> fromTime, Nullable<System.TimeSpan> toTime, string name)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("fromTime", fromTime) :
                new ObjectParameter("fromTime", typeof(System.TimeSpan));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("toTime", toTime) :
                new ObjectParameter("toTime", typeof(System.TimeSpan));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Doubles_Select_Result>("sp_DailyLog_Doubles_Select", dateParameter, areaIDParameter, fromTimeParameter, toTimeParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Doubles_Select2_Result> sp_DailyLog_Doubles_Select2(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<System.TimeSpan> fromTime, Nullable<System.TimeSpan> toTime, string name)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("fromTime", fromTime) :
                new ObjectParameter("fromTime", typeof(System.TimeSpan));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("toTime", toTime) :
                new ObjectParameter("toTime", typeof(System.TimeSpan));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Doubles_Select2_Result>("sp_DailyLog_Doubles_Select2", dateParameter, areaIDParameter, fromTimeParameter, toTimeParameter, nameParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Doubles_SelectAllEmployees_Result> sp_DailyLog_Doubles_SelectAllEmployees(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Doubles_SelectAllEmployees_Result>("sp_DailyLog_Doubles_SelectAllEmployees", nameParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_DoublesWorking_Select_Result> sp_DailyLog_DoublesWorking_Select(Nullable<int> dailyLogID)
        {
            var dailyLogIDParameter = dailyLogID.HasValue ?
                new ObjectParameter("dailyLogID", dailyLogID) :
                new ObjectParameter("dailyLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_DoublesWorking_Select_Result>("sp_DailyLog_DoublesWorking_Select", dailyLogIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_LastCheckLocationAndTime_Result> sp_DailyLog_LastCheckLocationAndTime(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<byte> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_LastCheckLocationAndTime_Result>("sp_DailyLog_LastCheckLocationAndTime", dateParameter, areaIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_LastCheckTime_Result> sp_DailyLog_LastCheckTime(Nullable<int> dailyLogID)
        {
            var dailyLogIDParameter = dailyLogID.HasValue ?
                new ObjectParameter("dailyLogID", dailyLogID) :
                new ObjectParameter("dailyLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_LastCheckTime_Result>("sp_DailyLog_LastCheckTime", dailyLogIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_PersonWorking_Select_Result> sp_DailyLog_PersonWorking_Select(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_PersonWorking_Select_Result>("sp_DailyLog_PersonWorking_Select", dateParameter, areaIDParameter, locationIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Search_Result> sp_DailyLog_Search(string reportNumber, Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> shiftID)
        {
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Search_Result>("sp_DailyLog_Search", reportNumberParameter, dateParameter, areaIDParameter, locationIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_Switches_Select_Result> sp_DailyLog_Switches_Select(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> shiftID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_Switches_Select_Result>("sp_DailyLog_Switches_Select", dateParameter, areaIDParameter, locationIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_DailyLog_SwitchesWorking_Select_Result> sp_DailyLog_SwitchesWorking_Select(Nullable<int> dlID)
        {
            var dlIDParameter = dlID.HasValue ?
                new ObjectParameter("dlID", dlID) :
                new ObjectParameter("dlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DailyLog_SwitchesWorking_Select_Result>("sp_DailyLog_SwitchesWorking_Select", dlIDParameter);
        }
    
        public virtual ObjectResult<sp_Department_Sel4DDL_Result> sp_Department_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Department_Sel4DDL_Result>("sp_Department_Sel4DDL");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Employee_Search_Result> sp_Employee_Search(string name, Nullable<System.DateTime> date, Nullable<byte> departmentID, Nullable<byte> positionID, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> shiftID, Nullable<bool> isStandByStaff, Nullable<bool> isActive)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(byte));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            var isStandByStaffParameter = isStandByStaff.HasValue ?
                new ObjectParameter("isStandByStaff", isStandByStaff) :
                new ObjectParameter("isStandByStaff", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_Search_Result>("sp_Employee_Search", nameParameter, dateParameter, departmentIDParameter, positionIDParameter, areaIDParameter, locationIDParameter, shiftIDParameter, isStandByStaffParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_Employee_Sel4DDL_Result> sp_Employee_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_Sel4DDL_Result>("sp_Employee_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_Employee_Sel4DDL_ByPositionID_Result> sp_Employee_Sel4DDL_ByPositionID(Nullable<byte> positionID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_Sel4DDL_ByPositionID_Result>("sp_Employee_Sel4DDL_ByPositionID", positionIDParameter);
        }
    
        public virtual ObjectResult<string> sp_Employee_SelectDayOffs(Nullable<long> workScheduleEmployeeID)
        {
            var workScheduleEmployeeIDParameter = workScheduleEmployeeID.HasValue ?
                new ObjectParameter("WorkScheduleEmployeeID", workScheduleEmployeeID) :
                new ObjectParameter("WorkScheduleEmployeeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Employee_SelectDayOffs", workScheduleEmployeeIDParameter);
        }
    
        public virtual ObjectResult<sp_Employee_SelectForWorkSchedule_Result> sp_Employee_SelectForWorkSchedule(Nullable<byte> areaID, Nullable<byte> shiftID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_SelectForWorkSchedule_Result>("sp_Employee_SelectForWorkSchedule", areaIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_Employee_SelectFromWorkSchedule_Result> sp_Employee_SelectFromWorkSchedule(Nullable<int> workScheduleID)
        {
            var workScheduleIDParameter = workScheduleID.HasValue ?
                new ObjectParameter("workScheduleID", workScheduleID) :
                new ObjectParameter("workScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_SelectFromWorkSchedule_Result>("sp_Employee_SelectFromWorkSchedule", workScheduleIDParameter);
        }
    
        public virtual ObjectResult<sp_Employee_UnscheduledSelectForWorkSchedule_Result> sp_Employee_UnscheduledSelectForWorkSchedule(Nullable<int> wsID, Nullable<byte> areaID, Nullable<byte> shiftID)
        {
            var wsIDParameter = wsID.HasValue ?
                new ObjectParameter("wsID", wsID) :
                new ObjectParameter("wsID", typeof(int));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_UnscheduledSelectForWorkSchedule_Result>("sp_Employee_UnscheduledSelectForWorkSchedule", wsIDParameter, areaIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_FilterHistory_Result> sp_FilterHistory(Nullable<byte> userID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(byte));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterHistory_Result>("sp_FilterHistory", userIDParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Incidents_Search_Result> sp_Incidents_Search(string reportNumber, Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<byte> incidentTypeID)
        {
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var incidentTypeIDParameter = incidentTypeID.HasValue ?
                new ObjectParameter("incidentTypeID", incidentTypeID) :
                new ObjectParameter("incidentTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Incidents_Search_Result>("sp_Incidents_Search", reportNumberParameter, dateParameter, areaIDParameter, locationIDParameter, incidentTypeIDParameter);
        }
    
        public virtual ObjectResult<sp_IncidentType_Sel4DDL_Result> sp_IncidentType_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IncidentType_Sel4DDL_Result>("sp_IncidentType_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_Location_Sel4DDL_ByAreaID_Result> sp_Location_Sel4DDL_ByAreaID(Nullable<byte> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Location_Sel4DDL_ByAreaID_Result>("sp_Location_Sel4DDL_ByAreaID", areaIDParameter);
        }
    
        public virtual ObjectResult<sp_Operators_Sel4DDL_Result> sp_Operators_Sel4DDL(Nullable<byte> positionID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Operators_Sel4DDL_Result>("sp_Operators_Sel4DDL", positionIDParameter);
        }
    
        public virtual ObjectResult<sp_Position_Sel4DDL_Result> sp_Position_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Position_Sel4DDL_Result>("sp_Position_Sel4DDL");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_RPT_WorkSchedule_Result> sp_RPT_WorkSchedule(string year, string month, Nullable<byte> areaID, string shiftID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var shiftIDParameter = shiftID != null ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT_WorkSchedule_Result>("sp_RPT_WorkSchedule", yearParameter, monthParameter, areaIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_Shift_Sel4DDL_Result> sp_Shift_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_Sel4DDL_Result>("sp_Shift_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_Shift_Sel4DDL_ByPositionID_Result> sp_Shift_Sel4DDL_ByPositionID(Nullable<byte> positionID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_Sel4DDL_ByPositionID_Result>("sp_Shift_Sel4DDL_ByPositionID", positionIDParameter);
        }
    
        public virtual ObjectResult<sp_Shift_Sel4DDL_ByPositionIDAndTime_Result> sp_Shift_Sel4DDL_ByPositionIDAndTime(Nullable<byte> positionID, Nullable<System.TimeSpan> currentTime)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            var currentTimeParameter = currentTime.HasValue ?
                new ObjectParameter("currentTime", currentTime) :
                new ObjectParameter("currentTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_Sel4DDL_ByPositionIDAndTime_Result>("sp_Shift_Sel4DDL_ByPositionIDAndTime", positionIDParameter, currentTimeParameter);
        }
    
        public virtual ObjectResult<sp_Shift_Sel4TAB_ByPositionID_Result> sp_Shift_Sel4TAB_ByPositionID(Nullable<byte> positionID)
        {
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("positionID", positionID) :
                new ObjectParameter("positionID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shift_Sel4TAB_ByPositionID_Result>("sp_Shift_Sel4TAB_ByPositionID", positionIDParameter);
        }
    
        public virtual ObjectResult<sp_ShiftReports_Search_Result> sp_ShiftReports_Search(string reportNumber, Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> supervisorID, Nullable<byte> shiftID)
        {
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var supervisorIDParameter = supervisorID.HasValue ?
                new ObjectParameter("supervisorID", supervisorID) :
                new ObjectParameter("supervisorID", typeof(short));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("shiftID", shiftID) :
                new ObjectParameter("shiftID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShiftReports_Search_Result>("sp_ShiftReports_Search", reportNumberParameter, dateParameter, areaIDParameter, supervisorIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<sp_SickLeaveFor_Sel4DDL_Result> sp_SickLeaveFor_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SickLeaveFor_Sel4DDL_Result>("sp_SickLeaveFor_Sel4DDL");
        }
    
        public virtual ObjectResult<sp_SpecialOperations_Search_Result> sp_SpecialOperations_Search(Nullable<System.DateTime> date, Nullable<byte> areaID, Nullable<short> locationID, Nullable<bool> escortService, Nullable<bool> citInGT, Nullable<bool> citOutGT, Nullable<bool> extraOfficers)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("areaID", areaID) :
                new ObjectParameter("areaID", typeof(byte));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(short));
    
            var escortServiceParameter = escortService.HasValue ?
                new ObjectParameter("escortService", escortService) :
                new ObjectParameter("escortService", typeof(bool));
    
            var citInGTParameter = citInGT.HasValue ?
                new ObjectParameter("citInGT", citInGT) :
                new ObjectParameter("citInGT", typeof(bool));
    
            var citOutGTParameter = citOutGT.HasValue ?
                new ObjectParameter("citOutGT", citOutGT) :
                new ObjectParameter("citOutGT", typeof(bool));
    
            var extraOfficersParameter = extraOfficers.HasValue ?
                new ObjectParameter("extraOfficers", extraOfficers) :
                new ObjectParameter("extraOfficers", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SpecialOperations_Search_Result>("sp_SpecialOperations_Search", dateParameter, areaIDParameter, locationIDParameter, escortServiceParameter, citInGTParameter, citOutGTParameter, extraOfficersParameter);
        }
    
        public virtual ObjectResult<sp_StandByEmployee_Sel4DDL_Result> sp_StandByEmployee_Sel4DDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StandByEmployee_Sel4DDL_Result>("sp_StandByEmployee_Sel4DDL");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_WorkSchedule_AuditSelect_Result> sp_WorkSchedule_AuditSelect(Nullable<int> wsID)
        {
            var wsIDParameter = wsID.HasValue ?
                new ObjectParameter("wsID", wsID) :
                new ObjectParameter("wsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WorkSchedule_AuditSelect_Result>("sp_WorkSchedule_AuditSelect", wsIDParameter);
        }
    
        public virtual ObjectResult<sp_Employee_Sel4DDL_2_Result> sp_Employee_Sel4DDL_2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Employee_Sel4DDL_2_Result>("sp_Employee_Sel4DDL_2");
        }
    
        public virtual ObjectResult<sp_FilterUsers_Result> sp_FilterUsers(string role, string name, Nullable<bool> active)
        {
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FilterUsers_Result>("sp_FilterUsers", roleParameter, nameParameter, activeParameter);
        }
    }
}
